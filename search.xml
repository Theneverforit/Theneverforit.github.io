<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>原型和原型链</title>
    <url>/2021/11/28/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所有引用类型都有一个__proto__(隐式原型)属性，属性值是一个普通的对象</span><br><span class="line">所有函数都有一个prototype(原型)属性，属性值是一个普通的对象</span><br><span class="line">所有引用类型的__proto__属性指向它构造函数的prototype</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [1,2,3];</span><br><span class="line">a.__proto__ === Array.prototype; // true</span><br></pre></td></tr></table></figure>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype</span><br><span class="line">如果还没有找到就会再在构造函数的prototype的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，我们称为原型链。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Parent(month)&#123;</span><br><span class="line">    this.month = month;</span><br><span class="line">&#125;</span><br><span class="line">var child = new Parent(&#x27;Ann&#x27;);</span><br><span class="line">console.log(child.month); // Ann</span><br><span class="line">console.log(child.father); // undefined</span><br></pre></td></tr></table></figure>
<hr>
<p>原型：JS中的对象都包含了一个prototype的内部属性，这个属性所对应的就是该对象的原型。</p>
<p>原型链：原型链是有一些用来继承和共享属性的对象组成的对象链。并且原型链的长度是有限的。</p>
]]></content>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE生命周期</title>
    <url>/2021/11/28/VUE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简单的来说Vue生命周期就是Vue实例从创建到销毁的过程就是生命周期"><a href="#简单的来说Vue生命周期就是Vue实例从创建到销毁的过程就是生命周期" class="headerlink" title="简单的来说Vue生命周期就是Vue实例从创建到销毁的过程就是生命周期"></a>简单的来说Vue生命周期就是Vue实例从创建到销毁的过程就是生命周期</h3><p>即指从创建、初始化数据、编译模版、挂载Dom到渲染、更新到渲染、销毁等一系列过程<br>他主要分为8个阶段:<br><code>创建前后、载入前后、更新前后、销毁前后</code><br>即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeGreat：执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</span><br><span class="line">created:组件初始化完毕，各种数据可以使用，常用于异步数据获取</span><br><span class="line">beforeMount：未执行渲染、更新，dom未创建</span><br><span class="line">mounted：初始化结束，dom已创建，可用于获取访问数据和dom元素</span><br><span class="line">beforeUpdate：更新前，可用于获取更新前的各种状态</span><br><span class="line">updated：更新后，所有状态已是最新</span><br><span class="line">beforeDestroy：销毁前，可用于一些定时器或订阅的取消</span><br><span class="line">destroyed:组件已销毁</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期图示"></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>null和undefind的区别</title>
    <url>/2021/11/28/null%E5%92%8Cundefind%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先看一个判断题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(null==undefined)//true</span><br><span class="line">console.log(null===undefined)//false</span><br></pre></td></tr></table></figure>
<p>观察可以发现：null和undefined 两者相等，但是当两者做全等比较时，两者又不等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原因：null： Null类型，代表“空值”，代表一个空对象指针，使用typeof运算得到 “object”，所以你可以认为它是一个特殊的对象值。</span><br><span class="line"></span><br><span class="line">          undefined： Undefined类型，当一个声明了一个变量未初始化时，得到的就是undefined。</span><br><span class="line"></span><br><span class="line">实际上，undefined值是派生自null值的，ECMAScript标准规定对二者进行相等性测试要返回true</span><br></pre></td></tr></table></figure>
<p>-那到底什么时候是null,什么时候是undefined呢？</p>
<p>null表示”没有对象”，即该处不应该有值。典型用法是：</p>
<p><code>1.作为函数的参数，表示该函数的参数不是对象。</code></p>
<p><code>2.作为对象原型链的终点。</code></p>
<p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</p>
<p><code>1.变量被声明了，但没有赋值时，就等于undefined。</code></p>
<p><code>2.调用函数时，应该提供的参数没有提供，该参数等于undefined。</code></p>
<p><code>3.对象没有赋值的属性，该属性的值为undefined。</code></p>
<p><code>4.函数没有返回值时，默认返回undefined。</code></p>
<hr>
<p>undefined 代表的含义是未定义，null 代表的含义是空对象。</p>
<p>一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>
]]></content>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
</search>
